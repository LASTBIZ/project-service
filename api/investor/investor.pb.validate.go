// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/investor/investor.proto

package investor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvestorRequestMultiError, or nil if none found.
func (m *ListInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := ListInvestorRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListInvestorRequestMultiError(errors)
	}

	return nil
}

// ListInvestorRequestMultiError is an error wrapping multiple validation
// errors returned by ListInvestorRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvestorRequestMultiError) AllErrors() []error { return m }

// ListInvestorRequestValidationError is the validation error returned by
// ListInvestorRequest.Validate if the designated constraints aren't met.
type ListInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvestorRequestValidationError) ErrorName() string {
	return "ListInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvestorRequestValidationError{}

// Validate checks the field values on ListInvestorReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListInvestorReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvestorReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvestorReplyMultiError, or nil if none found.
func (m *ListInvestorReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvestorReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvestors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInvestorReplyValidationError{
						field:  fmt.Sprintf("Investors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInvestorReplyValidationError{
						field:  fmt.Sprintf("Investors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvestorReplyValidationError{
					field:  fmt.Sprintf("Investors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListInvestorReplyMultiError(errors)
	}

	return nil
}

// ListInvestorReplyMultiError is an error wrapping multiple validation errors
// returned by ListInvestorReply.ValidateAll() if the designated constraints
// aren't met.
type ListInvestorReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvestorReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvestorReplyMultiError) AllErrors() []error { return m }

// ListInvestorReplyValidationError is the validation error returned by
// ListInvestorReply.Validate if the designated constraints aren't met.
type ListInvestorReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvestorReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvestorReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvestorReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvestorReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvestorReplyValidationError) ErrorName() string {
	return "ListInvestorReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvestorReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvestorReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvestorReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvestorReplyValidationError{}

// Validate checks the field values on CreateInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInvestorRequestMultiError, or nil if none found.
func (m *CreateInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FullName

	if m.GetUserId() <= 0 {
		err := CreateInvestorRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateInvestorRequestMultiError(errors)
	}

	return nil
}

// CreateInvestorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInvestorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInvestorRequestMultiError) AllErrors() []error { return m }

// CreateInvestorRequestValidationError is the validation error returned by
// CreateInvestorRequest.Validate if the designated constraints aren't met.
type CreateInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInvestorRequestValidationError) ErrorName() string {
	return "CreateInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInvestorRequestValidationError{}

// Validate checks the field values on AddMoneyInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMoneyInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMoneyInvestorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMoneyInvestorRequestMultiError, or nil if none found.
func (m *AddMoneyInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMoneyInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMoney() <= 0 {
		err := AddMoneyInvestorRequestValidationError{
			field:  "Money",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AddMoneyInvestorRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddMoneyInvestorRequestMultiError(errors)
	}

	return nil
}

// AddMoneyInvestorRequestMultiError is an error wrapping multiple validation
// errors returned by AddMoneyInvestorRequest.ValidateAll() if the designated
// constraints aren't met.
type AddMoneyInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMoneyInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMoneyInvestorRequestMultiError) AllErrors() []error { return m }

// AddMoneyInvestorRequestValidationError is the validation error returned by
// AddMoneyInvestorRequest.Validate if the designated constraints aren't met.
type AddMoneyInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMoneyInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMoneyInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMoneyInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMoneyInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMoneyInvestorRequestValidationError) ErrorName() string {
	return "AddMoneyInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMoneyInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMoneyInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMoneyInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMoneyInvestorRequestValidationError{}

// Validate checks the field values on RemoveMoneyInvestorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMoneyInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMoneyInvestorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMoneyInvestorRequestMultiError, or nil if none found.
func (m *RemoveMoneyInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMoneyInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMoney() <= 0 {
		err := RemoveMoneyInvestorRequestValidationError{
			field:  "Money",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := RemoveMoneyInvestorRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveMoneyInvestorRequestMultiError(errors)
	}

	return nil
}

// RemoveMoneyInvestorRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveMoneyInvestorRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveMoneyInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMoneyInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMoneyInvestorRequestMultiError) AllErrors() []error { return m }

// RemoveMoneyInvestorRequestValidationError is the validation error returned
// by RemoveMoneyInvestorRequest.Validate if the designated constraints aren't met.
type RemoveMoneyInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMoneyInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMoneyInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMoneyInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMoneyInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMoneyInvestorRequestValidationError) ErrorName() string {
	return "RemoveMoneyInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMoneyInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMoneyInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMoneyInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMoneyInvestorRequestValidationError{}

// Validate checks the field values on SetMoneyInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMoneyInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMoneyInvestorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMoneyInvestorRequestMultiError, or nil if none found.
func (m *SetMoneyInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMoneyInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMoney() <= 0 {
		err := SetMoneyInvestorRequestValidationError{
			field:  "Money",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := SetMoneyInvestorRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetMoneyInvestorRequestMultiError(errors)
	}

	return nil
}

// SetMoneyInvestorRequestMultiError is an error wrapping multiple validation
// errors returned by SetMoneyInvestorRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMoneyInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMoneyInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMoneyInvestorRequestMultiError) AllErrors() []error { return m }

// SetMoneyInvestorRequestValidationError is the validation error returned by
// SetMoneyInvestorRequest.Validate if the designated constraints aren't met.
type SetMoneyInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMoneyInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMoneyInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMoneyInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMoneyInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMoneyInvestorRequestValidationError) ErrorName() string {
	return "SetMoneyInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMoneyInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMoneyInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMoneyInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMoneyInvestorRequestValidationError{}

// Validate checks the field values on DeleteInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInvestorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInvestorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInvestorRequestMultiError, or nil if none found.
func (m *DeleteInvestorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInvestorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteInvestorRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInvestorRequestMultiError(errors)
	}

	return nil
}

// DeleteInvestorRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInvestorRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInvestorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInvestorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInvestorRequestMultiError) AllErrors() []error { return m }

// DeleteInvestorRequestValidationError is the validation error returned by
// DeleteInvestorRequest.Validate if the designated constraints aren't met.
type DeleteInvestorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInvestorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInvestorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInvestorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInvestorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInvestorRequestValidationError) ErrorName() string {
	return "DeleteInvestorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInvestorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInvestorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInvestorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInvestorRequestValidationError{}

// Validate checks the field values on ListInvestorReply_Investor with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvestorReply_Investor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvestorReply_Investor with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvestorReply_InvestorMultiError, or nil if none found.
func (m *ListInvestorReply_Investor) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvestorReply_Investor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FullName

	if len(errors) > 0 {
		return ListInvestorReply_InvestorMultiError(errors)
	}

	return nil
}

// ListInvestorReply_InvestorMultiError is an error wrapping multiple
// validation errors returned by ListInvestorReply_Investor.ValidateAll() if
// the designated constraints aren't met.
type ListInvestorReply_InvestorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvestorReply_InvestorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvestorReply_InvestorMultiError) AllErrors() []error { return m }

// ListInvestorReply_InvestorValidationError is the validation error returned
// by ListInvestorReply_Investor.Validate if the designated constraints aren't met.
type ListInvestorReply_InvestorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvestorReply_InvestorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvestorReply_InvestorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvestorReply_InvestorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvestorReply_InvestorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvestorReply_InvestorValidationError) ErrorName() string {
	return "ListInvestorReply_InvestorValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvestorReply_InvestorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvestorReply_Investor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvestorReply_InvestorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvestorReply_InvestorValidationError{}
