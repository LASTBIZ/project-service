// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"project-service/internal/biz"
	"project-service/internal/conf"
	"project-service/internal/data"
	"project-service/internal/server"
	"project-service/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	dataData, cleanup, err := data.NewData(confData, logger, db)
	if err != nil {
		return nil, nil, err
	}
	categoryRepo := data.NewCategoryRepo(dataData, logger)
	categoryUseCase := biz.NewCategoryUseCase(categoryRepo, logger)
	categoryService := service.NewCategoryService(categoryUseCase, logger)
	investorRepo := data.NewInvestorRepo(dataData, logger)
	investorUseCase := biz.NewInvestorUseCase(investorRepo, logger)
	investorService := service.NewInvestorService(investorUseCase, logger)
	projectRepo := data.NewProjectRepo(dataData, logger)
	projectUseCase := biz.NewProjectUseCase(projectRepo, logger)
	projectService := service.NewProjectService(projectUseCase, logger)
	roadmapService := service.NewRoadmapService()
	grpcServer := server.NewGRPCServer(confServer, categoryService, investorService, projectService, roadmapService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
